"use strict";
var TuyaDevice = require("tuyapi");
var util_1 = require("util");
module.exports = function (RED) {
    function TuyaSmartConfigNode(properties) {
        var _this = this;
        var node = this;
        RED.nodes.createNode(this, properties);
        this.deviceName = properties.deviceName;
        this.deviceId = properties.deviceId;
        this.deviceKey = properties.deviceKey;
        this.deviceIp = properties.deviceIp;
        this.pollingInterval = properties.pollingInterval;
        this.request = JSON.parse(properties.request);
        node.status({ fill: "yellow", shape: "ring", text: "connecting" });
        var indicateConnectionOk = function () { return node.status({ fill: "green", shape: "ring", text: "connected" }); };
        var indicateConnectionError = function () { return node.status({ fill: "red", shape: "ring", text: "disconnected" }); };
        var indicateFailedToSetState = function () { return node.status({ fill: "red", shape: "ring", text: "error changing state" }); };
        /**
         * Polls the state from device, then sends it through the output nodes.
         * Will set the ui-status as well accordingly.
         */
        var pollAndSendState = function () {
            smartDevice.get(_this.request).then(function (data) {
                indicateConnectionOk();
                node.send({
                    payload: {
                        data: data,
                        deviceIp: node.deviceIp,
                        deviceId: node.deviceId,
                        deviceName: node.deviceName
                    }
                });
            }).catch(indicateConnectionError);
        };
        /**
         * Interval handling
         */
        var pollingTimer = undefined;
        ;
        var startPolling = function () {
            stopPolling();
            pollingTimer = setInterval(function () {
                pollAndSendState();
            }, node.pollingInterval * 1000);
        };
        var stopPolling = function () {
            if (pollingTimer === undefined)
                return;
            clearInterval(pollingTimer);
            pollingTimer = undefined;
        };
        /**
         *
         * @param msg input message received
         */
        var onInput = function (msg) {
            var setMsg;
            if (Array.isArray(msg.payload)) {
                var inputNodeMsgs = msg.payload;
                var object = {
                    multiple: true,
                    data: {}
                };
                // convert input messages to TuyAPI state
                for (var _i = 0, inputNodeMsgs_1 = inputNodeMsgs; _i < inputNodeMsgs_1.length; _i++) {
                    var inputNodeMsg = inputNodeMsgs_1[_i];
                    object.data[util_1.isUndefined(inputNodeMsg.dpsIndex) ? 1 : inputNodeMsg.dpsIndex] = inputNodeMsg.set;
                }
                setMsg = object;
            }
            else {
                var inputNodeMsg = msg.payload;
                // convert input message to TuyAPI state
                var object = {
                    set: inputNodeMsg.set,
                    dps: util_1.isUndefined(inputNodeMsg.dpsIndex) ? 1 : inputNodeMsg.dpsIndex
                };
                setMsg = object;
            }
            // set state
            smartDevice.set(setMsg).then(function (result) {
                result ? indicateConnectionOk() : indicateFailedToSetState();
                pollAndSendState();
            }).catch(function (e) {
                indicateConnectionError();
                console.error(e);
            });
        };
        // hook up handlers
        this.on('close', stopPolling);
        this.on('input', onInput);
        // device handling
        var deviceOptions = {
            id: node.deviceId,
            key: node.deviceKey,
            ip: node.deviceIp
        };
        var smartDevice = new TuyaDevice(deviceOptions);
        // initiate the node
        startPolling();
    }
    RED.nodes.registerType("tuya-smart", TuyaSmartConfigNode, {
        credentials: {
            deviceKey: { type: "text" }
        }
    });
};
//# sourceMappingURL=tuya-smart.js.map